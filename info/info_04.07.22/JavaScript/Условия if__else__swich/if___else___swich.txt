курс 2 урок 20

1. если 4 равно 4 то в консоли вывыдим ОК, иначе Error

if (4 == 4) {
    console.log('Ok!');
} else {
    console.log('Error');
} - код выдаст Ok!


if (4 == 5) {
    console.log('Ok!');
} else {
    console.log('Error');
} - код выдаст Error







!!! Условие превращает любой тип данных в БУЛИНОВЫЙ (правда либо ложь ) чтобы проверить правдивость.
!!! 2 правила:
-  оператор и-&& всегда возвращает первое ложное значение если оно есть и дальше код не идет
- если все аргументы верны и код дашел до конца, то возвращается значение последнего аргумента

еще есть такое правило: и запинается на лжи, а или запинается на правде!


логические операторы это и-&&, или-||, не-!

пример

1.
const hamburger = true;
const fries = true;

if (hamburger && fries) {   - условие выполнилось тк true - оба правда - и в консоль выдалост 'OK'
    console.log('OK');
}

2.
const hamburger = true;
const fries = false;

if (hamburger && fries) {   - условие не выполнилось  false тк есть одна неправда  - и в консоль ничего не пошло.
    console.log('OK');
}

3.
const hamburger = true;
const fries = true;

if (hamburger || fries) {   - условие выполнилось тк true - оба правда - и в консоль выдалост 'OK'
    console.log('OK');
}

4.
const hamburger = false;
const fries = true;

if (hamburger || fries) {   - условие выполнилось тк true - есть хотябы одна правда и этого достаточно - и в консоль выдалост 'OK'
    console.log('OK');       
}








2. Вложенность условий

const num = 50;

if (num < 49) {  ---- в логическом контексте false, а если бы было true - то условие бы выполнилось и код выдал бы Error
    console.log('Error');
} else if (num > 100) {   ---- в логическом контексте false
    console.log('Много');
} else {        ------ и если не выполнилось не одно из условий выше, то выводит: console.log('ok');
    console.log('ok');
}



3. чтобы сократить код когда много условий используется тернарный оператор "?" и ":" ( он называется тернарным, потому что в его работе 
учавствуют три аргумента: (num === 50), console.log('ok'), console.log('Error')  )но она только на строгое соответствие
 в отличии от примера выше.

 (num === 50) ? console.log('ok') : console.log('Error');

 разберум:
 (num === 50) ? console.log('ok') --- в скобках условие и если условие верно, то выполняется действие console.log('ok')
 а если не верно то  : console.log('Error');




4. Также для того чтобы избежать больших ветвлений условий используется конструкция switch.
!!!!! Свич всегда идет только на строгое сравнение, в отличчии от обычных условий!!!!!!!

const num = 50;

switch (num) {
    case 49:  --- идет строгое сравнение Num и 49 - получаем false
        console.log('неверно');    --------не выводится
        break; -- -- обязательный синтаксис, если условие выполняется то выводится console.log и код прерывается break, и не выполняет оставшийся
    case 100:
        console.log('неверно');
        break;
    case 50:    ---- вот true
        console.log('Верно!');  ---- код выводит Верно!
        break;
    default:   -----------  еслти не один из кейсов не выполняется
        console.log('Не в этот раз');
        break;    
}