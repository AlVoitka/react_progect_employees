
Изначально сосояния state были толко в классовых компонентах, со временем добавились хуки и сосотяние появилось и в функциональных 
компанентах.
Но для начала разберу  состояние в классовом компоненте.

1.
Создам классовый компонент:

import { Component } from 'react'; - --------импортировал компонент это обязательно


class AlexV extends Component {
    render() {
        return (
            <div>
                <h1> My name is Alex</h1>
            </div>
        )
    }
}





2. Чтобы в классовый компонент передать пропсы, нужно использовать конструктор:
.....................
 function App () {
        render() {
            return (
                <div className="app">
                    <AlexV surname="Voitka" age="37"/>   ----- вот у меня компонент с пропсами surname="Voitka" age="37"
                </div>
            )
        }
    }

    export dafault App; 
..........................

и уже в самом компоненте я принимаю пропсы через конструктор

import { Component } from 'react'; 


class AlexV extends Component {


    constructor(props) { --- вот принял пропсы 
        super(props);  --- просто такой синтаксис обязателен
    }


    render() {
        const {surname, age} = this.props;  ---- вот деструртурирую пропсы в читаемый код!!!!!!!!!!!!!!!!!

        return (
            <div>
                <h1> My name is Alex, my surname is{surname} my age is{age} </h1>
            </div>
        )
    }
}


3.
Динамически менять состояние комонента при помоще state.

State - это обЪект который описывает динамическое поведение компонента

Добавляю сосоотояние в конструкторе компонета.

import { Component } from 'react'; 


class AlexV extends Component {


    constructor(props) {
        super(props); 

        this.state = {  ------ вот добавил состояние с свойством sex
            sex: 'man'
        } 
    }


    render() {
        const {surname, age} = this.props; 
        return (
             

            <div>
                <h1> My name is Alex, my surname is{surname}, my age is{age}, im {this.state.sex} </h1>  --- так обратился к этому свойству
            </div>
        )
    }
}


4.
Напрямую нельзя изменять состояние state, для этого используется специальная команда:

this.setState() - и эта команда принемает в себя обЪект с новым состоянием.

this.setState({
    sex: woman
})

пример:

УРОК 130 СОСТОЯНИЕ КОМПОНЕНТА














//////////////////  130  ////////////////

Хочу сделать чтобы при нажатии на печеньку динамически менялось его состояние.
Для этого модифицирую компонент employees-list-item.js

1. так было:

import './employees-list-item.css';

const EmployeesListItem = ({name, salary, increase}) => {       -------тут замена 

    let classNames = "list-group-item d-flex justify-content-between";
    if (increase) {
        classNames += ' increase';
    }

    return (
        <li className={classNames}>
            <span className="list-group-item-label">{name}</span>
            <input type="text" className="list-group-item-input" defaultValue={salary +'$'}/>
            <div className='d-flex justify-content-center align-items-center'>
                <button type="button"
                    className="btn-cookie btn-sm ">
                    <i className="fas fa-cookie"></i>
                </button>

                <button type="button"
                        className="btn-trash btn-sm ">
                    <i className="fas fa-trash"></i>
                </button>
                <i className="fas fa-star"></i>
            </div>
        </li>
    )
}

export default EmployeesListItem;


---так стало:

import { Component } from 'react'; - --------импортировал компонент

import './employees-list-item.css';

class EmployeesListItem extends Component{    ---- тут изменил
    render() {    -----------обернул все в рендер
        let classNames = "list-group-item d-flex justify-content-between";
    if (increase) {
        classNames += ' increase';
    }

    return (
        <li className={classNames}>
            <span className="list-group-item-label">{name}</span>
            <input type="text" className="list-group-item-input" defaultValue={salary +'$'}/>
            <div className='d-flex justify-content-center align-items-center'>
                <button type="button"
                    className="btn-cookie btn-sm ">
                    <i className="fas fa-cookie"></i>
                </button>

                <button type="button"
                        className="btn-trash btn-sm ">
                    <i className="fas fa-trash"></i>
                </button>
                <i className="fas fa-star"></i>
            </div>
        </li>
    )
    }
    
}

export default EmployeesListItem;

2. создаю переменные и в них записываю ...хз

const {name, salary, increase} = this.props;


3. и создаю конструктор в который прихядят пропсы :
и передаю состояние -false которое будет меняться.

    constructor(props) {
        super(props);
        this.state = {
            increase: false
        }
    }

и чтобы улавливать меняющееся состояние ( это кнопка с печенькой) , но эту кнопку 
назначаю обработчик события:

                <button type="button"
                    className="btn-cookie btn-sm "
                    onClick={this.onIncrease}>   ----вот его навесил  на клик и передаю в него метод .onIncrease
                    <i className="fas fa-cookie"></i>
                </button>

далее создаю этот метод .onIncrease:

    onIncrease = () => {
        this.setState(({increase}) => ({
            increase: !increase
        }))
    }

4. Теперь навешу обработчик по клику на Фамилию работника, чтобы по клику на Фамилию
добавлялся класс и в результате чего на странице появлялась звездочка.

4.1 Навешиваю обработчик onClick= c  методом {this.onRise}:

<span className="list-group-item-label" onClick={this.onRise}>{name}</span>

4.2 Создаю метод для обработчика по аналогии как выше:

    onRise = () => {
        this.setState(({rise}) => ({
            rise: !rise
        }))
    }