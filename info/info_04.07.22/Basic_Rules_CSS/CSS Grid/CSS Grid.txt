https://css-tricks.com/snippets/css/complete-guide-grid/#:~:text=CSS%20Grid%20Layout%20is%20the,largely%20a%201%2Ddimensional%20system.

1 курс 74 урок
1.
есть два основных элемента (грид контейнер и элемент) и к ним применяюе свойства:
А бообще сетка состоит из строк и колонок

.grid-container {
    display: grid;  --- задаю  гряды
    grid-template-columns: 400px 400px 400px;  --- создаю 3 колонки шириной 400пк ( можно в % или em)
    grid-template-rows: 70px 70px;  --- создаю 2 строки 
    // grid-template: 70px 70px / 400px 400px 400px  - так можно объеденить в комбинорованном свойстве
    column-gap: 20px;  -- разрывы между колонками по вертикали ( раньше было свойство grig-column-gap , но оно устарело)
    row-gap: 5px;   --- разрывы по горизонтали
    //gap: 5px: -- комбинированное свойство как для колонок так и для строк

}

.grid-elem {
    height: 50px;
    background-color: rgba(1, 1, 96, 1);
    color: #fff;
    line-height: 50px;
    text-align: center;
    font-size: 26px;
    border: 1px solid #000;
    border-radius: 4px;
}

2. 
Еденицыа измерения для сетки grid: фрэкшен юнит
Для адаптивной верстки следует использовать именно эти еденицы.

FR
Самый верный перевод fractional unit в контексте Grid разработки и применения fr в ней же, это единица гибкости. 
Почему? Это вы поймете прочитав статью.
Сама по себе fr это новая форма единицы измерения, в основном ассоциируемая с CSS Grid.

.grid-container {
    display: grid;
    width: 100%;  --- задал ширину от контейнера
    height: 300px;
    grid-template-columns: 1fr 1fr 1fr;  --- вот  я задал  3 колонки динамически одинаковой шрины (вместо того чтобы расчитыват и делить)
    grid-template-columns: 1fr 2fr 1fr;  --- а так я разбил на 4 части по ширине, но вторая часть принемает в себя 2 и получае 50% 
    grid-template-columns: repeat(3, 1fr)  == grid-template-columns: 1fr 1fr 1fr;  -- сокращенная запись
    grid-template-rows: 2fr 0.5fr; - со строками аналогично
}

3.
Явные и неявные гряды
Когда верстка формируется динамическ то могут  формироваться элементы вываливающиеся из явной (правильноразмерной сетки) сетки.
и эти элементы контролируются дыумя свойствоами:
Следует знать что неявный грид растет только вниз.!!


.grid-container {
    display: grid;
    width: 100%;
    height: 200px;
    grid-template-columns: 2fr 1fr 1fr;
    grid-auto-rows: 200px; ---  назначил высоту неявному гриду
    grid-auto-columns: 50px;  ---назначил ширину вывалившемуся элементу
}

4.
Для того чтобы назначить минимальный размер треку ( это и есть элемент в сетке), но при этом чтобы он был 
гибким и при необходимости растягивался под более емкий контент те не торчал и растянул трек.
Решение уже есть - функция minmax()
https://developer.mozilla.org/en-US/docs/Web/CSS/minmax

.grid-container {
    display: grid;
    width: 100%;
    grid-template-columns: minmax(100px, 300px) minmax(100px, 300px) minmax(100px, 300px); - создал 3 колонки 100 минимальное значение, 
                                                                                          а если контен не влазит то до 300 растянется
    grid-template-columns: repeat(3, minmax(100px, 300px)); - сжатый синтаксис  

    grid-template-rows: repeat(3, minmax(100px, 300px));  -- тоже и для строк

}

4.1 
Если максимальный размер трека не должен быть ограничен, то:

grid-template-rows: repeat(3, minmax(100px, auto));  ---вот задал минимальный размер и максимум не ограничил но задал


4.2
https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%8E%D1%82-auto-fill-%D0%B8-auto-fit-%D0%B2-css-grid-7d903a6c678e
свойства:  auto-fill И auto-fit
отличная вещь для адаптации

Если яхочу чтобы колличество колонок и их размер формировался адаптивно в зависимости от размера экрана.

grid-template-columns: repeat(auto-fill, minmax(100px, 300px));  --- так было - grid-template-columns: repeat(3, minmax(100px, 300px));
тут  вместо того чтобы сказать чтобы у меня было 3 колонки, я назначил auto-fill и теберь колонки будут автоматически
делится на равные размеры в зависимости от ширины экрана


auto-fit - почти тоже но рачтягивает треки чтобы не оставлять пустой экран
auto-fill - оставляет пустое место под невмещающиеся элементы

4.3
grid-auto-flow
По умолчания неявные элементы размещаются внизу от основной сетки. Так вот при помощи grid-auto-flow
можно поменять это значение.

grid-auto-flow: column;  -- разместит справа как новую колонку но и менякт порядок элементов другим образом
grid-auto-flow: row;  --- разместит ниже как новую строку
