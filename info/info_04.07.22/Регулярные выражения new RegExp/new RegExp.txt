урок 97 курс 2

https://learn.javascript.ru/regexp-introduction

RegExp дословно и есть regular expression - регулярные выражения

Эта технология позволяет очень удобно работать со строками:
удалять, заменять части слов, искать части строк, ограничивать ввод определённых знаков и тд.

Регулярные выражения – мощное средство поиска и замены в строке.
В JavaScript регулярные выражения реализованы отдельным объектом RegExp и интегрированы в методы строк

Регулярные выражения - это шаблоны, используемые для сопоставления последовательностей символов в строках. 
В JavaScript регулярные выражения также являются объектами. Эти шаблоны используются в методах exec и test объекта RegExp, 
а также match, replace, search и split объекта String.

Регулярное выражение (оно же «регэксп», «регулярка» или просто «рег»), состоит из шаблона (также говорят «паттерн») и 
необязательных флагов.

Существует два синтаксиса для создания регулярного выражения.

«Длинный» синтаксис: классический - малоиспользуемый.
 
regexp = new RegExp("шаблон", "флаги");


…И короткий синтаксис, использующий слеши "/":

regexp = /шаблон/; // без флагов
regexp = /шаблон/gmi; // с флагами gmi 
Слеши /.../ говорят JavaScript о том, что это регулярное выражение. 
Они играют здесь ту же роль, что и кавычки для обозначения строк.

Регулярное выражение regexp в обоих случаях является объектом встроенного класса RegExp.
Основная разница между этими двумя способами создания заключается в том, что слеши /.../ не допускают 
никаких вставок переменных (наподобие возможных в строках через ${...}). Они полностью статичны.
Слеши используются, когда мы на момент написания кода точно знаем, каким будет регулярное выражение – 
и это большинство ситуаций. А new RegExp – когда мы хотим создать регулярное выражение «на лету» из динамически 
сгенерированной строки.


Реальный пример:

const ans = prompt('Введите ваше имя');

В этой строке я хочу найти все буквы 'а'
дял этого я создам регулярное выражение и помещу его в переменную:

const reg = /а/;  -- между слешев помещаю паттерн ( или шаблон того что я хочу искать).

Как юзер в промпте я ввожу имя аlex. И чтобы увидеть результат вывожу в консоль:

console.log(ans.search(reg));   --- методы могут быть разные, ниже будет о них
в ans лежит строка полученная от пользователя,и этой строке назначаю метод search и во внутрь помещаю 
то регулярное выражение по которому бутет поиск буквы 'а' внутри строки.
Как итог в консоли получаю // 1  а если буква не найдена то -1

Но также можно в регулярное выражение добавлять флаги:

const reg = /а/i;  --- i - это флаг

их можно также комбинировать
const reg = /а/igu;

В JavaScript их всего шесть:

i  - С этим флагом поиск не зависит от регистра: нет разницы между A и a (см. пример ниже).
g  - С этим флагом поиск ищет все совпадения, без него – только первое.
m  - Многострочный режим (рассматривается в главе Многострочный режим якорей ^ $, флаг "m").
s  - Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n (рассматривается в главе Символьные классы).
u  - Включает полную поддержку Юникода. Флаг разрешает корректную обработку суррогатных пар (подробнее об этом в главе Юникод: флаг "u" и класс \p{...}).
y  - Режим поиска на конкретной позиции в тексте (описан в главе Поиск на заданной позиции, флаг "y")


..........Для того чтобы получить от кода другой формат ответа, можно использовать метод .match

console.log(ans.match(reg)); // ['n', index: 1, input: "alex"]  - получаю масив 


........... Чтобы изменить строку использую метод replace

console.log(ans.replace(reg,'xxx')); - первый аргумент- что заменяем, второй - на что изменяем

console.log('12-55-66'.replace(/-/g, ':'));// 12:55:66  -- так я меняю все дефисы на двоеточия.

............ Просто найти  сымволы в строке у вернуть либо true/false  использую метод .test



Также в выражения существуют классы:

\d - обратный слеш - ищем только цифры
\w - ищем только буквы
\s - ищем все пробелы


const ans = prompt('Введите ваше номер');
const reg = /\d/;
console.log(ans.match(reg));// из белеберды neopw5jubhcas метод найдет ["5", index:6, input:"neopw5jubhcas"]
                                                                       пятерку на 5 позиции

И есть еще обратные классы:
если нужно найти не числа, не буквы:
\D  -- ищу все не буквы
\W   --- ищу все не цифры
