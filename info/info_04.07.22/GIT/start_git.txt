                                             Git
Настройки
git --version    ( проверка активной версии)
git config  или  git config –global user.name ALEX (  глобальное назначение имени пользователя. Можно локально назначить (без global))
git config –global user.email v HYPERLINK "mailto:v.superalex@gmail.com". HYPERLINK "mailto:v.superalex@gmail.com"superalex HYPERLINK "mailto:v.superalex@gmail.com"@ HYPERLINK "mailto:v.superalex@gmail.com"gmail HYPERLINK "mailto:v.superalex@gmail.com". HYPERLINK "mailto:v.superalex@gmail.com"com ( Назначил глобально почту)
git config user.name  ( проверка пользователя по имени)

Добавление файлов в локальное хранилище

git init  ( инициализация гита. Строго в папке проекта. Те в терминале должен быть путь к проекту)
git add .  или  git add css/ (добавление файлов внутрь локального репозитория . В первом случае добавляются все файлы, а во втором всю папку CSS. Или можно лобой файл к примеру так git add index.html. Или git add css/style.css – так конкретный файл в папке.
git add *.html – так добавлю все файлы с расширением html 
git add *.js  - так все файлы с расширением js
git add  css /* -   все файлы внутри папки css
git add css/**/*.html – все файлы с расширением .html  и доже  вложоенные папкив папку css
git add !css/style.css – добавляю все файлы в папке css кроме style.css
git add !index.html – добавляю все файлы кроме index.html

После добавления файлы находятся в стадии ожидания.
git status  ( проверка состояния файлов)
git rm -cached  index.html ( этой командой я удалил файл index.html из стадии ожидания)
git commit -m “комментарий” ( перемецаю файли из ожидания в локальный репозиторий и делоть жто нужно с комментарием “”)
git log ( просмотр событий и хронолигий)
git log -oneline ( просмотр событий и коммитов св сокращенной форме в один ряд)


Git ignore
Это скрытый файл который добавляется в проекте в корне (рядом с index.html) 
.gitignore
Открываю его в проекте и прописываю что игнорирую :
1.index.html ( так не будет добаяляться index.html)
2.css/  ( игнорю всю папку css)
3.js/*.js ( игнорю все файлы с расширением js в папке js)
4.*.php ( игнорю все файлы с расширением . php)
5.*.txt ( все текстовые файлы)

Удаление изменений 
https://www.youtube.com/watch?v=oSyZXepztD4
1. К примеру я создал коммит и потом уже далее работал в проекта, но по некоторым причинам меня все не устоило и я хочу удалить все изменеия до состояния как только создал коммит:
git checkout .
Работает в случае если еще не применялась команда
 git add .
Тоесть файли еще не в состоянии stage (подготовлены дял создания коммита). А если они уже добавлены в stage, то:
git reset .   - так я вытаскиваю все файли из stage
git checkout .  - и так удаляю изменения
2. Если я хочу удалить все изменения в конктреном файле:
git checkout -- index.html
так я удалил все изменения только в index.hnml
А если конкретный файл помещен в stage, то сначала я его оттуда вытаскиваю:
git reset index.hnml
а затем удаляю изменения на нем:
git checkout -- index.html
3. Если уже создал коммит в нем что то жестко запорол, и хочу варнуться на один коммит назад:
git reset --hard HEAD^1

 //////////////////     Ветки. Branch    ///////////////
Ветка создается как правило для отдельного человека при совместной разработке, и на своей ветке человек уже решает поставленные ему задачи. 
И все изменения и коммиты видит только он на сам
git branch xxx ( создаю новую ветку с названием xxx, но остаюсь  на мастере)
git checkout xxx ( перехожу на ветку ххх)
git checkout –b yyy ( так я и создал ветку yyy и перешел на нее)
git branch -a (показывает все существующие в проекте ветки и реальную позицию ) 
git branch  тоже показывает все существующие в проекте ветки и реальную позицию
git branch –v  (Чтобы посмотреть последний коммит на каждой из веток)
Опции --merged и --no-merged могут отфильтровать этот список для вывода только тех веток, которые слиты или ещё не слиты в текущую ветку. 
Чтобы посмотреть те ветки, которые вы уже слили с текущей, можете выполнить команду git branch --merged:
    $ git branch --merged
     iss53
    * master


Слияние веток
Для начала нужно перейти на мастер-ветку
git merge xxx ( объеденил ветку мастер и ххх. Веткак ххх сохраняется, но данные из нее сливаются с мастером и на мастере теперь все данные из ххх)
 Для удаления ветки выполните команду git branch с параметром -d: нахится нужно на мастер-ветке.
git branch -d xxx

 
  GitHub 

На сайте создаю новый репозиторий
1.Теперь нужно к нему продключиться 
git remote add origin https//……. ( url ссылку беру в самом вновьсозданном репозитории. Origin можно менять на другое название, это название удаленного репозитория). Все, теперь локальный и удаленный оепозитории связаны между собой.
2. Добавляем файлы из локального в удаленный репозиторий
git push –u origin master ( те я говорю что пушу файлы на удаленный репозиторий origin и пушю ветку master


3. README.md (. mark down )  -это файл описание, хорошее объемное описание проекта. Создается  в проекте и размещается около index.html
Далее в проекте заполняем этот файл:
1.#Большой заголовок
2. Текст описания
Далее добавляем этот файл в локальный репозиторий, потом пушим на удаленный. 
Клонирование репозитория в проект
2 способа:
download ZIP ( скачиваем, разархивируем и закидываем в проект файлы)
 Клонирование
В терминале : cd ../ ( в этом примере я по дереву поднялся в папку выше. А вообще нужно указать ( разместиться) в нужную папку выгрузки файлов
git clone https//…( на странице репозитория берем и капируем URL)
git clone htpps//….. .git  sss ( так я сразу создаю  новую папку sss и вкладываю в нее клонированные файлы

 //////////////////      PULL        //////////////
Во время команндной работы в случае когда другие члены команды добавили изменения и коммиты залили в удаленный репозиторий, 
я могу их подгрузить в свой комп ( проект)
git pull  (проверяет и находит новые файлы и подкачивает только новые файлы из удаленного репозитория)
А после работы ( внесения изминений) я должен сделать
git push – запушить свои  изминения в удаленный репозиторий (  но в этот момент репозитории должны быть связаны между собой) 





///////////////    Изменить origin адрес репозитория двумя способами:   //////////////

Запускаю стартер  нового проекта (Webpack_START_Project), а он уже подвязан к репозиторию другому.
Я создаю новый репозиторий на гитхабе и командой
git remote set-url origin + hppt///.....
подвязываю этот стартер под новый репозиторий.


1) Первый способ задать url репозитория:

использовать команду git remote set-url origin, например:

git remote set-url origin git@github.com:vicman-wi/wi-backend.git

2) Второй способ:

Отредактировать файл .git/config: секция [remote "origin"] параметр - url. 
 
Файл ~/.gitconfig хранит настройки конкретного пользователя. Этот файл используется при указании параметра --global.
В системах семейства Windows Git ищет файл .gitconfig в каталоге $HOME (C:\Documents and Settings\$USER или C:\Users\$USER для большинства пользователей).


Эти два способа идентичные. Т.е. вызов команды git remote set-url origin заменит содержимое git конфига.





Если терминал подвис
:wq  или wq!

