https://only-to-top.ru/blog/coding/2020-01-05-sobytiya-formy.html

1.
Событие отправки формы 'submit'

Следить за событием  отправки формы и поймать его нужно использовать submit:

my_form.addEventListener('submit', () => {
    console.log('Событие отправки формы')
})

2. Для чекбокса лучше использовать 'change' - тк идет изменение состояния чекбокса

checkbox. addEventListener('change', ()=> {

})

3.
Событие 'input'
Событие input срабатывает тут же при изменении значения текстового элемента и поддерживается всеми браузерами, кроме IE8-.


4.
Очитска полей формы 'reset'

Событие очистки полей формы:

my_form.addEventListener('reset', () => {
    console.log('Событие очистки полей формы')
})

Метод для очистки полей формы:

my_form.reset()

5. и еще много событий для формы:
https://only-to-top.ru/blog/coding/2020-01-05-sobytiya-formy.html


События изменения данных:

Событие     	Описание	    Особенности
change---	Изменение значения любого элемента формы. Для текстовых элементов срабатывает при потере фокуса.	В IE8- на чекбоксах ждёт потери фокуса, поэтому для мгновенной реакции ставят также onclick-обработчик или onpropertychange.
input---	Событие срабатывает только на текстовых элементах. Оно не ждёт потери фокуса, в отличие от change.	В IE8- не поддерживается, в IE9 не работает при удалении символов.
propertychange---	Только для IE10-. Универсальное событие для отслеживания изменения свойств элементов. Имя изменённого свойства содержится в event.propertyName. Используют для мгновенной реакции на изменение значения в старых IE.	В IE9 не срабатывает при удалении символов.
cut/copy/paste---	Срабатывают при вставке/копировании/удалении текста. Если в их обработчиках отменить действие браузера, то вставки/копирования/удаления не произойдёт.	Вставляемое значение получить нельзя: на момент срабатывания события в элементе всё ещё старое значение, а новое недоступно.
Ещё особенность: в IE8- события change, propertychange, cut и аналогичные не всплывают. То есть, обработчики нужно назначать на сам элемент, без делегирования.



Реальный пример:
имею форму в ней инпут и чекбокс:
юзер поставил чекбокс и что то заполнил в инпут, и чтобы сохранить эти значения в локалсторедж
делаю следующее:

получаю элементы:

const checkbox =  query......- сам чекбокс
      form =   --- сама форма 

навешиваю обработчики:

checkbox.addEventListener('change',()=> {  -- change - отслеживает изменение состояния
    localStorage.setItem('isCheck', true);  -- обращаюсь к хранилищу и устанавливаю значение
})
таким образом при клике на голочку в стораж запишется ключ-'isCheck',со значение -true

И теперь реализую функционал когда юзер заходит на страницу, у него идет автоматом проверка LocalStorage
и если в нем есть такой ключ, то чекбок переставляю в позицию - отмечен галочкой (checked):

if(localStorage.getItem('isCheck')) {
    checkbox.checked = true;
}
если в хранилище будет получен ключ 'isCheck' то болучаем true (если его там нет то получим null - а это есть false),
так вот если trut и условие выполнено, то обращаюсь к чекбоксу и спользую свойство checked = true. Тоесть система
самостоятельно ставит галочку чекбоксу.